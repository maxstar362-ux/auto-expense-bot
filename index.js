const { Telegraf, Markup } = require('telegraf');
const fs = require('fs');

const bot = new Telegraf('8495287734:AAH8ZCbjy_XaoLHS0gsasSDHomiNOdGr_0c');
const DATA_FILE = 'data.json';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
let data = {};
if (fs.existsSync(DATA_FILE)) {
  data = JSON.parse(fs.readFileSync(DATA_FILE));
} else {
  fs.writeFileSync(DATA_FILE, JSON.stringify({}));
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—à–∏–Ω
function getCarsList() {
  const keys = Object.keys(data);
  if (keys.length === 0) return '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.';
  return keys.map((car, i) =>  `${i + 1}. ${car} `).join('\n');
}

// –ù–∞—á–∞–ª–æ
bot.start((ctx) => {
  ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º. –ß—Ç–æ –¥–µ–ª–∞–µ–º?',
    Markup.keyboard([
      ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å', 'üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'],
      ['üìÑ –û—Ç—á—ë—Ç', 'üöó –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π']
    ]).resize()
  );
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å', (ctx) => {
  ctx.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–∏–º–≤–æ–ª–æ–≤ VIN, –Ω–∞–ø—Ä–∏–º–µ—Ä: Tiguan ‚Ä¢ 123456');
  bot.on('text', (ctx2) => {
    const carName = ctx2.message.text.trim();
    if (!data[carName]) {
      data[carName] = {
        buy: { –ú–∞–∫—Å–∏–º: 0, –ê–Ω–¥—Ä–µ–π: 0 },
        expenses: [],
        salePrice: 0
      };
      saveData();
      ctx2.reply(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å "${carName}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
    } else {
      ctx2.reply('–¢–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –µ—Å—Ç—å.');
    }
    bot.removeListener('text');
  });
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
bot.hears('üí∞ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', (ctx) => {
  if (Object.keys(data).length === 0) {
    ctx.reply('–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å.');
    return;
  }

  ctx.reply('–í—ã–±–µ—Ä–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å:', Markup.keyboard([...Object.keys(data), ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]).resize());

  bot.on('text', (ctx2) => {
    const car = ctx2.message.text.trim();
    if (!data[car]) return;

    ctx2.reply(
      '–ö—Ç–æ –≤–Ω–æ—Å–∏—Ç —Ä–∞—Å—Ö–æ–¥?',
      Markup.keyboard([['–ú–∞–∫—Å–∏–º'], ['–ê–Ω–¥—Ä–µ–π'], ['‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞']]).resize()
    );

    bot.on('text', (ctx3) => {
      const person = ctx3.message.text.trim();
      if (person === '–ú–∞–∫—Å–∏–º' || person === '–ê–Ω–¥—Ä–µ–π') {
        ctx3.reply('–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–µ–º–æ–Ω—Ç, –º–æ–π–∫–∞ –∏ —Ç.–¥.)');

        bot.on('text', (ctx4) => {
          const expenseName = ctx4.message.text.trim();
          ctx4.reply(–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—É–º–º—É –¥–ª—è "${expenseName}");

          bot.on('text', (ctx5) => {
            const cost = parseFloat(ctx5.message.text);
            if (isNaN(cost)) {
              ctx5.reply('–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!');
              return;
            }

            data[car].expenses.push({
              person,
              expenseName,
              cost
            });
            saveData();
            ctx5.reply(–†–∞—Å—Ö–æ–¥ "${expenseName}" –Ω–∞ —Å—É–º–º—É ${cost}‚ÇΩ –¥–æ–±–∞–≤–ª–µ–Ω –æ—Ç ${person}.);
            bot.removeListener('text');
          });
        });
      }
    });
  });
});

// –û—Ç—á—ë—Ç
bot.hears('üìÑ –û—Ç—á—ë—Ç', (ctx) => {
  if (Object.keys(data).length === 0) {
    ctx.reply('–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.');
    return;
  }

  let text = '';
  for (const [car, info] of Object.entries(data)) {
    const totalByMax = info.expenses.filter(e => e.person === '–ú–∞–∫—Å–∏–º').reduce((sum, e) => sum + e.cost, 0);
    const totalByAnd = info.expenses.filter(e => e.person === '–ê–Ω–¥—Ä–µ–π').reduce((sum, e) => sum + e.cost, 0);
    const total = totalByMax + totalByAnd;

    text += üöó ${car}\n;
    text += –ú–∞–∫—Å–∏–º: ${totalByMax}‚ÇΩ\n–ê–Ω–¥—Ä–µ–π: ${totalByAnd}‚ÇΩ\n–í—Å–µ–≥–æ: ${total}‚ÇΩ\n\n;
  }

  ctx.reply(text);
});

bot.hears('üöó –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π', (ctx) => {
  ctx.reply(getCarsList());
});

bot.launch();
console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');
